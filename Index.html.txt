<!--
Prototipo: Control y Turnos JG Office
Un solo archivo HTML/CSS/JS - listo para montar en hosting
Funcionalidades:
- Registro de visitantes (nombre, cédula opcional, teléfono, servicio)
- Genera número de turno por servicio (A=Cedulación, B=Actas, C=Transcripciones)
- Lista en tiempo real, marcar "Atendido" o "Llamar siguiente"
- Exportar registros a CSV
- Almacenamiento local (localStorage) como simulación de backend

Nota: Para producción conectar el código JS con un backend (PHP/Node) y una DB (MySQL/Postgres/Firebase).
-->

<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Control y Turnos - Prototipo</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body{background:#f6f9fc}
    .card-header{background:#0d6efd;color:#fff}
    .turn-badge{font-weight:700}
    .service-A{background:#e7f1ff}
    .service-B{background:#fff7e6}
    .service-C{background:#f3f7e7}
    .big-btn{font-size:1.05rem;padding:0.7rem 1rem}
    @media (max-width:768px){ .hide-sm{display:none} }
  </style>
</head>
<body>
<div class="container py-4">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h3 class="m-0">Control y Turnos - MIREX Office (Prototipo)</h3>
    <div class="text-end small text-muted">Usuario: Joel • Demo local</div>
  </div>

  <div class="row g-3">
    <div class="col-lg-5">
      <div class="card shadow-sm">
        <div class="card-header">Registro de Visitantes</div>
        <div class="card-body">
          <form id="formRegister">
            <div class="mb-2">
              <label class="form-label">Nombre y Apellido</label>
              <input id="name" class="form-control" required />
            </div>
            <div class="mb-2">
              <label class="form-label">Cédula (opcional)</label>
              <input id="idNumber" class="form-control" />
            </div>
            <div class="mb-2">
              <label class="form-label">Teléfono</label>
              <input id="phone" class="form-control" required />
            </div>
            <div class="mb-3">
              <label class="form-label">Servicio</label>
              <select id="service" class="form-select" required>
                <option value="">-- Seleccionar servicio --</option>
                <option value="A">Cedulación</option>
                <option value="B">Actas</option>
                <option value="C">Transcripciones</option>
              </select>
            </div>
            <div class="d-flex gap-2">
              <button type="submit" class="btn btn-primary big-btn">Registrar entrada</button>
              <button type="button" id="printTicket" class="btn btn-outline-secondary big-btn">Imprimir turno</button>
            </div>
          </form>
          <div id="lastTurn" class="mt-3 small text-success"></div>
        </div>
      </div>

      <div class="card mt-3 shadow-sm">
        <div class="card-header">Gestión de Turnos</div>
        <div class="card-body">
          <div class="d-flex gap-2 mb-2">
            <button class="btn btn-success" id="callNextA">Llamar siguiente (Cedulación)</button>
            <button class="btn btn-warning" id="callNextB">Llamar siguiente (Actas)</button>
            <button class="btn btn-info" id="callNextC">Llamar siguiente (Transcripciones)</button>
          </div>
          <div class="d-flex gap-2">
            <button class="btn btn-outline-primary" id="exportCsv">Exportar CSV</button>
            <button class="btn btn-outline-danger" id="clearAll">Limpiar datos (demo)</button>
          </div>
          <div class="mt-3 small text-muted">Turno actual: <span id="currentCalled">-</span></div>
        </div>
      </div>

    </div>

    <div class="col-lg-7">
      <div class="card shadow-sm">
        <div class="card-header">Panel en Tiempo Real</div>
        <div class="card-body">
          <div class="mb-3 d-flex justify-content-between align-items-center">
            <div>
              <input id="filterSearch" class="form-control" placeholder="Buscar por nombre, teléfono o turno" />
            </div>
            <div class="ms-2 hide-sm">
              <select id="filterService" class="form-select">
                <option value="">Todos los servicios</option>
                <option value="A">Cedulación</option>
                <option value="B">Actas</option>
                <option value="C">Transcripciones</option>
              </select>
            </div>
          </div>

          <div class="table-responsive">
            <table class="table table-sm table-hover align-middle">
              <thead>
                <tr>
                  <th>Turno</th>
                  <th>Nombre</th>
                  <th class="hide-sm">Cédula</th>
                  <th>Teléfono</th>
                  <th>Servicio</th>
                  <th>Hora entrada</th>
                  <th>Estado</th>
                  <th></th>
                </tr>
              </thead>
              <tbody id="tableBody"></tbody>
            </table>
          </div>

        </div>
      </div>
    </div>
  </div>

  <footer class="mt-4 text-muted small">Prototipo local • Para producción conectar a base de datos y backend. Joel, si quieres te lo conecto a PHP/MySQL.</footer>
</div>

<script>
// --- Utilidades básicas ---
const STORAGE_KEY = 'control_turnos_demo_v1';
const services = { A: 'Cedulación', B: 'Actas', C: 'Transcripciones' };

// Carga inicial
let records = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
let lastGenerated = { A:0, B:0, C:0 };

// Reconstruir counters de turnos desde registros guardados
records.forEach(r=>{
  const prefix = r.turno.charAt(0);
  const num = parseInt(r.turno.slice(2));
  if(num> (lastGenerated[prefix]||0)) lastGenerated[prefix]=num;
});

// Helpers
function save(){ localStorage.setItem(STORAGE_KEY, JSON.stringify(records)); renderTable(); }
function formatTime(ts){ const d=new Date(ts); return d.toLocaleTimeString(); }
function pad(n, digits=3){ return String(n).padStart(digits,'0'); }

function genTurn(service){
  lastGenerated[service] = (lastGenerated[service]||0) + 1;
  return `${service}-${pad(lastGenerated[service])}`;
}

// Registro desde formulario
const form = document.getElementById('formRegister');
form.addEventListener('submit', (e)=>{
  e.preventDefault();
  const name = document.getElementById('name').value.trim();
  const idNumber = document.getElementById('idNumber').value.trim();
  const phone = document.getElementById('phone').value.trim();
  const service = document.getElementById('service').value;
  if(!name || !phone || !service) return alert('Completa los campos obligatorios');
  const turno = genTurn(service);
  const rec = {id:Date.now(), turno, nombre:name, cedula:idNumber, telefono:phone, servicio:services[service], horaEntrada:Date.now(), estado:'En espera'};
  records.push(rec); save();
  document.getElementById('lastTurn').innerText = `Turno generado: ${turno} — Servicio: ${services[service]}`;
  form.reset();
});

// Render tabla
function renderTable(){
  const tbody = document.getElementById('tableBody'); tbody.innerHTML='';
  const filter = document.getElementById('filterSearch').value.toLowerCase();
  const fService = document.getElementById('filterService').value;
  const sorted = [...records].sort((a,b)=> a.horaEntrada - b.horaEntrada);
  for(const r of sorted){
    if(fService && r.turno.charAt(0)!==fService) continue;
    const text = `${r.turno} ${r.nombre} ${r.telefono}`.toLowerCase();
    if(filter && !text.includes(filter)) continue;
    const tr = document.createElement('tr');
    tr.className = r.turno.startsWith('A-')? 'service-A':'';
    tr.innerHTML = `
      <td><span class="badge bg-secondary turn-badge">${r.turno}</span></td>
      <td>${r.nombre}</td>
      <td class="hide-sm">${r.cedula || ''}</td>
      <td>${r.telefono}</td>
      <td>${r.servicio}</td>
      <td>${formatTime(r.horaEntrada)}</td>
      <td>${r.estado}</td>
      <td>
        ${r.estado==='En espera'? `<button class=\"btn btn-sm btn-success\" onclick=\"markAttended(${r.id})\">Atender</button>` : ''}
        <button class=\"btn btn-sm btn-outline-danger\" onclick=\"removeRecord(${r.id})\">Eliminar</button>
      </td>
    `;
    tbody.appendChild(tr);
  }
}

window.markAttended = function(id){
  const idx = records.findIndex(r=>r.id===id); if(idx===-1) return;
  records[idx].estado = 'Atendido'; records[idx].horaAtendido = Date.now(); save();
}

window.removeRecord = function(id){
  if(!confirm('Eliminar registro?')) return; records = records.filter(r=>r.id!==id); save();
}

// Llamar siguiente por servicio
function callNext(service){
  // buscar primer registro en espera con la letra del servicio
  const next = records.find(r=> r.turno.startsWith(service+'-') && r.estado==='En espera');
  if(!next){ alert('No hay más en espera para este servicio'); return; }
  next.estado='Llamado'; next.horaLlamado = Date.now(); save();
  document.getElementById('currentCalled').innerText = `${next.turno} — ${next.nombre}`;
  // opcional: reproducir sonido o notificación browser
}

document.getElementById('callNextA').addEventListener('click', ()=>callNext('A'));
document.getElementById('callNextB').addEventListener('click', ()=>callNext('B'));
document.getElementById('callNextC').addEventListener('click', ()=>callNext('C'));

// Export CSV
function exportCSV(){
  if(records.length===0){ alert('No hay datos para exportar'); return; }
  const rows = [['Turno','Nombre','Cedula','Telefono','Servicio','HoraEntrada','Estado','HoraAtendido']];
  for(const r of records){
    rows.push([r.turno, r.nombre, r.cedula||'', r.telefono, r.servicio, new Date(r.horaEntrada).toISOString(), r.estado, r.horaAtendido?new Date(r.horaAtendido).toISOString():'' ]);
  }
  const csv = rows.map(r=> r.map(cell=>`"${String(cell).replace(/"/g,'""')}"`).join(',')).join('\n');
  const blob = new Blob([csv], {type:'text/csv;charset=utf-8;'});
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a'); a.href=url; a.download = `turnos_export_${(new Date()).toISOString().slice(0,10)}.csv`; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
}

document.getElementById('exportCsv').addEventListener('click', exportCSV);

document.getElementById('clearAll').addEventListener('click', ()=>{ if(confirm('Borrar todos los registros demo?')){ records=[]; lastGenerated={A:0,B:0,C:0}; save(); localStorage.removeItem(STORAGE_KEY); }});

document.getElementById('filterSearch').addEventListener('input', renderTable);
document.getElementById('filterService').addEventListener('change', renderTable);

// Imprimir ticket (simple ventana de impresión)
document.getElementById('printTicket').addEventListener('click', ()=>{
  const last = records[records.length-1];
  if(!last) return alert('No hay turno reciente para imprimir');
  const popup = window.open('', '_blank', 'width=400,height=300');
  popup.document.write(`<pre style="font-family:sans-serif;font-size:16px">Turno: ${last.turno}\nServicio: ${last.servicio}\nNombre: ${last.nombre}\nTel: ${last.telefono}\nHora: ${new Date(last.horaEntrada).toLocaleString()}\n\nGracias por su visita</pre>`);
  popup.document.close(); popup.print();
});

// Inicial render
renderTable();

</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
